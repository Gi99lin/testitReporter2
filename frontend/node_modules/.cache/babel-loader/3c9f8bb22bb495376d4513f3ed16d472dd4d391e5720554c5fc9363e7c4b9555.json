{"ast":null,"code":"// @ts-nocheck\nimport axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Generic API response type\n\n// Auth API\nexport const authApi = {\n  login: (username, password) => {\n    return api.post('/auth/login', {\n      username,\n      password\n    });\n  },\n  register: (username, email, password) => {\n    return api.post('/auth/register', {\n      username,\n      email,\n      password\n    });\n  }\n};\n\n// User API\nexport const userApi = {\n  getCurrentUser: () => {\n    return api.get('/users/me');\n  },\n  updateCurrentUser: userData => {\n    return api.put('/users/me', userData);\n  },\n  updateToken: token => {\n    return api.put('/users/me/token', token);\n  },\n  getAllUsers: () => {\n    return api.get('/users');\n  },\n  getUserById: id => {\n    return api.get(`/users/${id}`);\n  },\n  createUser: userData => {\n    return api.post('/users', userData);\n  },\n  updateUser: (id, userData) => {\n    return api.put(`/users/${id}`, userData);\n  },\n  deleteUser: id => {\n    return api.delete(`/users/${id}`);\n  }\n};\n\n// Project API\nexport const projectApi = {\n  getVisibleProjects: () => {\n    return api.get('/projects');\n  },\n  getAllUserProjects: () => {\n    return api.get('/projects/all');\n  },\n  getProjectById: id => {\n    return api.get(`/projects/${id}`);\n  },\n  addProjectFromTestIt: testitId => {\n    return api.post('/projects/add', null, {\n      params: {\n        testitId\n      }\n    });\n  },\n  updateProjectVisibility: (id, visible) => {\n    return api.put(`/projects/${id}/visibility`, null, {\n      params: {\n        visible\n      }\n    });\n  },\n  removeProjectFromUser: id => {\n    return api.delete(`/projects/${id}/remove`);\n  },\n  updateProjectStatus: (id, status) => {\n    return api.put(`/projects/${id}/status`, null, {\n      params: {\n        status\n      }\n    });\n  },\n  deleteProject: id => {\n    return api.delete(`/projects/${id}`);\n  }\n};\n\n// Statistics API\nexport const statisticsApi = {\n  getProjectStatistics: (projectId, startDate, endDate) => {\n    return api.get(`/statistics/projects/${projectId}`, {\n      params: {\n        startDate,\n        endDate\n      }\n    });\n  },\n  collectProjectStatistics: (projectId, startDate, endDate) => {\n    return api.post(`/statistics/projects/${projectId}/collect`, null, {\n      params: {\n        startDate,\n        endDate\n      }\n    });\n  },\n  collectAllProjectsStatistics: (startDate, endDate) => {\n    return api.post('/statistics/collect-all', null, {\n      params: {\n        startDate,\n        endDate\n      }\n    });\n  }\n};\n\n// Admin API\nexport const adminApi = {\n  getAllSettings: () => {\n    return api.get('/admin/settings');\n  },\n  getSettingByKey: key => {\n    return api.get(`/admin/settings/${key}`);\n  },\n  updateSetting: (key, value, description) => {\n    return api.put(`/admin/settings/${key}`, {\n      key,\n      value,\n      description\n    });\n  },\n  createOrUpdateSetting: (key, value, description) => {\n    return api.post('/admin/settings', {\n      key,\n      value,\n      description\n    });\n  },\n  updateGlobalToken: token => {\n    return api.put('/admin/settings/global-token', token);\n  },\n  updateApiSchedule: cronExpression => {\n    return api.put('/admin/settings/api-schedule', cronExpression);\n  },\n  updateApiBaseUrl: baseUrl => {\n    return api.put('/admin/settings/api-base-url', baseUrl);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authApi","login","username","password","post","register","email","userApi","getCurrentUser","get","updateCurrentUser","userData","put","updateToken","getAllUsers","getUserById","id","createUser","updateUser","deleteUser","delete","projectApi","getVisibleProjects","getAllUserProjects","getProjectById","addProjectFromTestIt","testitId","params","updateProjectVisibility","visible","removeProjectFromUser","updateProjectStatus","deleteProject","statisticsApi","getProjectStatistics","projectId","startDate","endDate","collectProjectStatistics","collectAllProjectsStatistics","adminApi","getAllSettings","getSettingByKey","key","updateSetting","value","description","createOrUpdateSetting","updateGlobalToken","updateApiSchedule","cronExpression","updateApiBaseUrl","baseUrl"],"sources":["/Users/ivanakimkin/Projects/testItReports/frontend/src/services/api.ts"],"sourcesContent":["// @ts-nocheck\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Generic API response type\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data: T;\n  timestamp: string;\n}\n\n// Auth API\nexport const authApi = {\n  login: (username: string, password: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/auth/login', { username, password });\n  },\n  register: (username: string, email: string, password: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/auth/register', { username, email, password });\n  },\n};\n\n// User API\nexport const userApi = {\n  getCurrentUser: (): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get('/users/me');\n  },\n  updateCurrentUser: (userData: any): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put('/users/me', userData);\n  },\n  updateToken: (token: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put('/users/me/token', token);\n  },\n  getAllUsers: (): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get('/users');\n  },\n  getUserById: (id: number): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get(`/users/${id}`);\n  },\n  createUser: (userData: any): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/users', userData);\n  },\n  updateUser: (id: number, userData: any): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put(`/users/${id}`, userData);\n  },\n  deleteUser: (id: number): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.delete(`/users/${id}`);\n  },\n};\n\n// Project API\nexport const projectApi = {\n  getVisibleProjects: (): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get('/projects');\n  },\n  getAllUserProjects: (): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get('/projects/all');\n  },\n  getProjectById: (id: number): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get(`/projects/${id}`);\n  },\n  addProjectFromTestIt: (testitId: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/projects/add', null, { params: { testitId } });\n  },\n  updateProjectVisibility: (id: number, visible: boolean): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put(`/projects/${id}/visibility`, null, { params: { visible } });\n  },\n  removeProjectFromUser: (id: number): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.delete(`/projects/${id}/remove`);\n  },\n  updateProjectStatus: (id: number, status: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put(`/projects/${id}/status`, null, { params: { status } });\n  },\n  deleteProject: (id: number): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.delete(`/projects/${id}`);\n  },\n};\n\n// Statistics API\nexport const statisticsApi = {\n  getProjectStatistics: (\n    projectId: number,\n    startDate: string,\n    endDate: string\n  ): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get(`/statistics/projects/${projectId}`, {\n      params: { startDate, endDate },\n    });\n  },\n  collectProjectStatistics: (\n    projectId: number,\n    startDate: string,\n    endDate: string\n  ): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post(`/statistics/projects/${projectId}/collect`, null, {\n      params: { startDate, endDate },\n    });\n  },\n  collectAllProjectsStatistics: (\n    startDate: string,\n    endDate: string\n  ): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/statistics/collect-all', null, {\n      params: { startDate, endDate },\n    });\n  },\n};\n\n// Admin API\nexport const adminApi = {\n  getAllSettings: (): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get('/admin/settings');\n  },\n  getSettingByKey: (key: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.get(`/admin/settings/${key}`);\n  },\n  updateSetting: (key: string, value: string, description?: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put(`/admin/settings/${key}`, { key, value, description });\n  },\n  createOrUpdateSetting: (key: string, value: string, description: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.post('/admin/settings', { key, value, description });\n  },\n  updateGlobalToken: (token: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put('/admin/settings/global-token', token);\n  },\n  updateApiSchedule: (cronExpression: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put('/admin/settings/api-schedule', cronExpression);\n  },\n  updateApiBaseUrl: (baseUrl: string): Promise<AxiosResponse<ApiResponse<any>>> => {\n    return api.put('/admin/settings/api-base-url', baseUrl);\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}